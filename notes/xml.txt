Xpath is like regular expression for trees.

packageL: xml2
xml_find_all(x, xpath, ns = xml_ns(x))
xml_find_first(x, xpath, ns = xml_ns(x))
xml_find_num(x, xpath, ns = xml_ns(x))
xml_find_chr(x, xpath, ns = xml_ns(x))
xml_find_lgl(x, xpath, ns = xml_ns(x)) # logical

xml_find_all returns a node set, and others return node

~~~~~~~~~~~~~~~~~
need reference book for 

page[
(text[contains()])
]

xml_attrs() retrieves all attributes values as a named character vector, xml_attrs() <- or xml_set_attrs() sets all atribute values. xml_attr() retrives the value of single attribute and xml_attr() <- or xml_set_attr() modifies its value. If the attribute doesn't exist, it will return default, which defaults to NA. xml_has_attr() tests if an attribute is present.

Source: https://www.xmlfiles.com/xml/xml-attributes/
In xml attributes are normally used to describe XML elements, or to provide additional information about elements.
example: <file type="gif">
Usually, or most common, attributes are used to provide information that is not a part of the content of the XML document.

Using an Attribute for sex:
<person sex='female'>
  <firstname>Anna</firstname>
  <lastname>Smith</lastname>
</person>

Using an Element for sex:
<person>
  <sex>female</sex>
  <firstname>Anna</firstname>
  <lastname>Smith</lastname>
</person>

Another example:
attribute:
<?xml version="1.0">
<note date="12/11/99">
<to>Tove</to>
<from>Jani</from>
<heading>Reminder</heading>
<body>Don't forget me this weekend!</body>
</note>

elemnt:
attribute:
<?xml version="1.0">
<note>
<date>12/11/99</date>
<to>Tove</to>
<from>Jani</from>
<heading>Reminder</heading>
<body>Don't forget me this weekend!</body>
</note>

extended element:
<?xml version="1.0">
<note>
<date>
  <day>12</day>
  <month>11</month>
  <year>99</year>
</date>
<to>Tove</to>
<from>Jani</from>
<heading>Reminder</heading>
<body>Don't forget me this weekend!</body>
</note>


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
xpath expression
source: https://www.w3schools.com/xml/xpath_syntax.asp


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?xml version="1.0" encoding="UTF-8"?>

<bookstore>

<book>
  <title lang="en">Harry Potter</title>
  <price>29.99</price>
</book>

<book>
  <title lang="en">Learning XML</title>
  <price>39.95</price>
</book>

</bookstore>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


nodename          Selects all nodes with the name "nodename"
/                 Selects from the root node
//                Selects node in the document fro the current node that match the selection no matter where they are.
.                 Selects the current node.
..                Selects the parent of the current node
@                 Selects attributes

some examples
bookstore         Selects all node with the name "bookstore"
/bookstore 	  Selects the root element bookstore. Note: If the path starts with a slash (/) it always represents an absolute path to an element!
bookstore/book    Selects all book elements that are children of bookstore.
//book            Selects all book elements no matter where they are in the document
bookstore//book   Selects all book elements that are descendant of the bookstore element, no matter where they are under the bookstore element.
//@lang           Selects all attributes that are names lang



Predicates:
Predicates are used to find a specific node or a node that contains a specific value. 
Predicates are always embedded in square brackets.

some examples
/bookstore/book[1]		Selects the first book element that is the child of the bookstore element. 
/bookstore/book[last()] 	Selects the last book element that is the child of the bookstore element
/bookstore/book[last()-1]	Selects the last but one book element that is the child of the bookstore element
/bookstore/book[position()<3]	Selects the first two book elements that are children of the bookstore element
//title[@lang]			Selects all the title elements that have an attribute named lang
//title[@lang='en']		Selects all the title elements that have a 'lang' attribute with a value of "en"
/bookstore/book[price>35.00] Selects all the book elements of the bookstore element that have a price element with a value greater than 35.00
/bookstore/book[price>35.00]/title Selects all the title elements of the book elements of the bookstore element that have a price element with a value greater than 35.00

Selecting Unknown Nodes.
*		Matches any element node
@*		Matches any attribute node
node()		Matches any node of any kind

some examples:
/bookstore/* 	Selects all the child element nodes of the bookstore element
//* 		Selects all elements in the document
//title[@*]	Selects all title elements which have at least one attribute of any kind.

Selecting Several paths   |

