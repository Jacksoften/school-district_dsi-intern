Xpath is like regular expression for trees.

packageL: xml2
xml_find_all(x, xpath, ns = xml_ns(x))
xml_find_first(x, xpath, ns = xml_ns(x))
xml_find_num(x, xpath, ns = xml_ns(x))
xml_find_chr(x, xpath, ns = xml_ns(x))
xml_find_lgl(x, xpath, ns = xml_ns(x)) # logical

xml_find_all returns a node set, and others return node

~~~~~~~~~~~~~~~~~
need reference book for 

page[
(text[contains()])
]

xml_attrs() retrieves all attributes values as a named character vector, xml_attrs() <- or xml_set_attrs() sets all atribute values. xml_attr() retrives the value of single attribute and xml_attr() <- or xml_set_attr() modifies its value. If the attribute doesn't exist, it will return default, which defaults to NA. xml_has_attr() tests if an attribute is present.

Source: https://www.xmlfiles.com/xml/xml-attributes/
In xml attributes are normally used to describe XML elements, or to provide additional information about elements.
example: <file type="gif">
Usually, or most common, attributes are used to provide information that is not a part of the content of the XML document.

Using an Attribute for sex:
<person sex='female'>
  <firstname>Anna</firstname>
  <lastname>Smith</lastname>
</person>

Using an Element for sex:
<person>
  <sex>female</sex>
  <firstname>Anna</firstname>
  <lastname>Smith</lastname>
</person>

Another example:
attribute:
<?xml version="1.0">
<note date="12/11/99">
<to>Tove</to>
<from>Jani</from>
<heading>Reminder</heading>
<body>Don't forget me this weekend!</body>
</note>

elemnt:
attribute:
<?xml version="1.0">
<note>
<date>12/11/99</date>
<to>Tove</to>
<from>Jani</from>
<heading>Reminder</heading>
<body>Don't forget me this weekend!</body>
</note>

extended element:
<?xml version="1.0">
<note>
<date>
  <day>12</day>
  <month>11</month>
  <year>99</year>
</date>
<to>Tove</to>
<from>Jani</from>
<heading>Reminder</heading>
<body>Don't forget me this weekend!</body>
</note>

